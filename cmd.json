[
  {
    "name": "Stack Buffer Overflow",
    "short": "stack",
    "commands": [
      {
        "code": "{ char $dest[_]; strcpy($dest, _); }",
        "comment": "Copy stack buffer using strcpy"
      },
      {
        "code": "{ char $dest[_]; strcat($dest, _); }",
        "comment": "Copy stack buffer using strcat"
      },
      {
        "code": "{ char $dest[_]; sprintf($dest, _, _); }",
        "comment": "Copy stack buffer using sprintf"
      },
      {
        "code": "{ char $dest[_]; gets($dest); }",
        "comment": "Copy stack buffer using gets"
      },
      {
        "code": "{ char $dest[_]; memcpy($dest, _, _); }",
        "comment": "Copy stack buffer using memcpy"
      },
      {
        "code": "{ char $dest[_]; memmove($dest, _, _); }",
        "comment": "Copy stack buffer using memmove"
      },
      {
        "code":  "{$func();}",
        "regex" : "func=^gets$",
        "comment": "Detect gets in code"
      }
    ]
  },

  {
    "name": "File operations",
    "short": "files",
    "commands": [
      {
        "code" : "{$file = fopen(_);not: if( $file == _)_;}",
        "comment": "Check for unverified fopen/open"
      },
      {
        "code": "{$file = fopen(_); not: fclose($file);}",
        "comment": "Check unclose fd"
      }
    ]
  },
  {
    "name": "Bugs in loops",
    "short": "loop",
    "commands": [
      {
        "code" : "{ _ $buff[_]; for(_;_;_){$buff[_] = _;}}",
        "comment": "Stack buffer in a loop"
      }
    ]
  },

  {
    "name": "Heap issues",
    "short": "heap",
    "commands": [
      {
        "code": "{ $buf = malloc(_); not: free($buf); }",
        "comment": "Allocated memory not freed"
      },
      {
        "code": "{ $buf = malloc(_); free($buf); free($buf); }",
        "comment": "Dumb double free"
      },
      {
        "code": "{ $buf = malloc(); not if($buff);}",
        "comment": "Find unverified malloc results"
      }
    ]
  },
  {
    "name": "Format string bug",
    "short": "fmt",
    "commands": [
      {
        "code": "{ strict: printf(_); }",
        "comment": "Allocated memory not freed"
      }
    ]
  },
  {
    "name": "Integer miss-use",
    "short": "intbug",
    "commands": [
      {
        "code": "{$type $var; $var<0;}",
        "regex": "$type=(unsigned|size_t)",
        "comment": "Check if unsigned is less than 0"
      },
      {
        "code": "{$type $var; $var<=0;}",
        "regex": "$type=(unsigned|size_t)",
        "comment": "Check if unsigned is less than or equal to 0"
      },
      {
        "code": "{$type $var; $var>=0;}",
        "regex": "$type=(unsigned|size_t)",
        "comment": "Check if unsigned is greater than or equal to 0"
      },
      {
        "code": "{$type $var=_; $var<0;}",
        "regex": "$type=(unsigned|size_t)",
        "comment": "Check if unsigned is less than 0 with initialization"
      },
      {
        "code": "{$type $var=_; $var<=0;}",
        "regex": "$type=(unsigned|size_t)",
        "comment": "Check if unsigned is less than or equal to 0 with initialization"
      },
      {
        "code": "{$type $var=_; $var>=0;}",
        "regex": "$type=(unsigned|size_t)",
        "comment": "Check if unsigned is greater than or equal to 0 with initialization"
      }
    ]
  },
  {
    "name": "Command Injection",
    "short": "cmdinj",
    "commands": [
      {
        "code": "{$func();}",
        "regex": "$func=^(system|popen)$",
        "comment": "Detect system or popen function without argument"
      },
      {
        "code": "{$func($arg);}",
        "regex": "$func=^(system|popen)$",
        "comment": "Detect system or popen function with an argument"
      }
    ]
  }
]
